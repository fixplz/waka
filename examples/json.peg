// Based on https://github.com/dmajda/pegjs/blob/master/examples/json.pegjs

{
  function buildObject(fields) {
    var obj = {}
    fields.forEach(function(f) {
      obj[f.name] = f.value
    })
    return obj
  }
}

Start =
  sp value:value { value } ;

sp = [\ \t\n\r]* ;

value =
  false
/ null
/ true
/ object
/ array
/ number
/ string ;

false = "false" sp { false } ;
null  = "null" sp  { null } ;
true  = "true" sp  { true } ;

object =
  '{' sp
  %anc
  members:(
    first:member
    rest:(',' sp m:member { m })*
    { buildObject([first].concat(rest)) }
  )?
  '}' sp
  { members !== null ? members: {} }
;

member =
  name:string ':' sp value:value
  { name: name, value: value }
;

array =
  '[' sp
  %anc
  values:(
    first:value
    rest:(',' sp v:value { v })*
    { [first].concat(rest) }
  )?
  ']' sp
  { values !== null ? values : [] }
;

number = num:( '-'? int frac? exp? ) sp { parseFloat(num) } ;

int  = '0' / ([1-9] [0-9]*) ;
frac = '.' [0-9]+ ;
exp  = [eE] ('-' / '+')? [0-9]+ ;

string = '"' chars:char* '"' sp { chars.join("") } ;

char =
  [\x20-\x21 \x23-\x5B \x5D-\uFFFF]
/
  "\\"
  sequence:(
      '"'
    / "\\"
    / "/"
    / "b" { "\b" }
    / "f" { "\f" }
    / "n" { "\n" }
    / "r" { "\r" }
    / "t" { "\t" }
    / "u" digits:(hex hex hex hex)
      { String.fromCharCode(parseInt(digits, 16)) }
  )
  { sequence }
;

hex = [0-9 a-f A-F] ;
