// Based on https://github.com/dmajda/pegjs/blob/master/examples/json.pegjs
// Based on the grammar from RFC 7159.
// http://tools.ietf.org/html/rfc7159

{
  function buildObject(fields) {
    var obj = {}
    fields.forEach(function(f) {
      obj[f.name] = f.value
    })
    return obj
  }
}

/* ----- 2. JSON Grammar ----- */

Start =
  ws value:value ws { value } ;

begin_array     = ws "[" ws ;
begin_object    = ws "{" ws ;
end_array       = ws "]" ws ;
end_object      = ws "}" ws ;
name_separator  = ws ":" ws ;
value_separator = ws "," ws ;

ws = [\ \t\n\r]* ;

/* ----- 3. Values ----- */

value =
  false
/ null
/ true
/ object
/ array
/ number
/ string ;

false = "false" { false } ;
null  = "null"  { null  } ;
true  = "true"  { true  } ;

/* ----- 4. Objects ----- */

object =
  begin_object
  %anc
  members:(
    first:member
    rest:(value_separator m:member { m })*
    { buildObject([first].concat(rest)) }
  )?
  end_object
  { members !== null ? members: {} }
;

member =
  name:string name_separator value:value
  { name: name, value: value }
;

/* ----- 5. Arrays ----- */

array =
  begin_array
  %anc
  values:(
    first:value
    rest:(value_separator v:value { v })*
    { [first].concat(rest) }
  )?
  end_array
  { values !== null ? values : [] }
;

/* ----- 6. Numbers ----- */

number = num:( '-'? int frac? exp? ) { parseFloat(num) } ;

int  = '0' / ([1-9] [0-9]*) ;
frac = '.' [0-9]+ ;
exp  = [eE] ('-' / '+')? [0-9]+ ;

/* ----- 7. Strings ----- */

string = '"' chars:char* '"' { chars.join("") } ;

char =
  [\x20-\x21 \x23-\x5B \x5D-\uFFFF]
/
  "\\"
  sequence:(
      '"'
    / "\\"
    / "/"
    / "b" { "\b" }
    / "f" { "\f" }
    / "n" { "\n" }
    / "r" { "\r" }
    / "t" { "\t" }
    / "u" digits:(hex hex hex hex)
      { String.fromCharCode(parseInt(digits, 16)) }
  )
  { sequence }
;

hex = [0-9 a-f A-F] ;
