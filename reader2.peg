{
  function asSeq(atoms) {
    return { seq: atoms }
  }
}


Start =
  sp
  // init:embed?
  rules:Rule+
  { rules }
;

Rule =
  name:RuleHead
  eq
  def:Expr
  semi
  { name: name, def: def }
;

RuleHead = n:word sp { n } ;

Expr =
  left:ExprAction
  (
    tail:(
      slash 
      e:ExprAction {e}
      )+
    { [left].concat(tail) }
  /
    { left }
  )
;

ExprAction =
  body:ExprSeq
  (
    format:ExprFormat
    { format: format, of: body }
  /
    { body }
  )
;

ExprFormat =
  '{' sp
  f:JSEmbed
  '}' sp
  { f }
;

ExprSeq =
  atoms:ExprAtom*
  { asSeq(atoms) }
;

ExprAtom =
  bind:(n:word col {n})?
  expr:(
    Ref / Range / Literal
  / ExprParens
  )
  op:[?*+]? sp
  { 'atom' } // TODO
;

Ref = n:word { ref: n } ;
Range = '<>' { range: '<>' } ; // TODO
Literal = s:str { str: s } ;
ExprParens = '(' sp e:expr ')' { e } ;


word = [a-z A-Z _][a-z A-Z 0-9 _]* { '..' } ; // TODO

str = 
  ["] x:[^"]* ["] { str: x }
/ ['] x:[^']* ['] { str: x }
;
// str =
//   ['] x:[(\\.|[^'])*] ['] sp {{ str: x }}
// / ["] x:[(\\.|[^"])*] ["] sp {{ str: x }}


JSEmbed =  [^{}]* ( '{' JSEmbed '}' [^{}]* )* ;


eq = '=' sp ;
slash = '/' sp ;
semi = ';' sp ;
col = ':' sp ;
comma = ',' ;


sp = [\r\n\ ]* ;

lsp =
  (
    [\r\n\ ]+
  / '//' [^ \n]* '\n'
  )*
;
