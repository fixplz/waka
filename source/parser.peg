{
  function unwrap(val) {
    if(val.length == 1) return val[0]
  }
  function atom(bind, expr, op) {
    var el =
      op == '+' ? { many: expr }
      : op == '*' ? { any: expr }
      : op == '?' ? { opt: expr }
      : expr
    if(bind) el.bind = bind
    return el
  }
}


Start =
  sp
  init:Embed?
  rules:Rule+
  { rules: rules, init: init, }
;

Rule =
  name:RuleHead
  eq
  %anc
  def:Expr
  semi
  { name: name, def: def }
;

RuleHead = n:word sp { n } ;

Expr =
  alt:( expr:ExprBlock %sep slash )+
  { unwrap(alt) || {alt: alt} }
;

ExprBlock =
  body:ExprSeq?
  format:FormatEmbed?
  { format ? { format: format, of: body } : body }
;

ExprSeq =
  atoms:ExprStep+
  { unwrap(atoms) || {seq: atoms} }
;

ExprStep =
  bind:(n:word col {n})?
  expr:ExprVal
  op:[?*+]? sp
  { atom(bind, expr, op) }
/ 
  op:[&!]
  (expr:ExprVal / embed:Embed)
  { lookahead: expr || true, not: op == '!', embed: embed }
/
  '%anc' sp { anchor: true }
;

ExprVal =
  Ref
/ Range
/ Literal
/ ExprParens
/ '%nl' sp { special: 'nl' }
/ '%' embed:Embed { special: { embed: embed } }
;

ExprParens =
  '(' sp
  %anc
  expr:Expr
  ( tag:('%sep' / '%delim') sp token:Expr )?
  ')' sp
  { tag ?
    { delim: expr, tag: tag, token: token }
    : expr }
;

Ref = n:word sp { ref: n } ;
Literal = s:str sp { str: s } ;

Range =
  '['
  %anc
  not:'^'? sp
  rs:(
    from:rangechar '-' to:rangechar sp { from: from, to: to }
  / chars:( (rangechar+) %delim sp )+ { oneof: chars.join('') }
  )*
  ']' sp
  { range: rs, not: not == '^' }
;

rangechar = strEsc / [^\[\]\ \^\n\r\u2028\u2029] ;

FormatEmbed =
  isobj:( &( '{' sp word ' '* col ) {true} )?
  embed:Embed
  { isobj ? '{' + embed + '}' : embed }
;

Embed =
  '{' embed:embed '}' sp
  { embed.trim() }
;

word = [a-z A-Z _][a-z A-Z 0-9 _]* ;

str =
  ["] x:(strEsc / [^"\n\r\u2028\u2029])* ["] { x }
/ ['] x:(strEsc / [^'\n\r\u2028\u2029])* ['] { x }
;
strEsc =
  '\\u' hex hex hex hex
/ '\\x' hex hex
/ '\\' any
;
hex = [0-9 a-f A-F] ;

embed =
  [^{}"']*
  (
    ( '{' embed '}' / str )
    [^{}"']*
  )* ;

eq = '=' sp ;
slash = '/' sp ;
semi = ';' sp ;
col = ':' sp ;

sp =
  (
    (%nl / ' ')+
  / '//' [^ \r\n]* %nl
  / '/*' (!'*/' (%nl / any))* '*/'
  )*
;

any = { _P.step(true) } ;

