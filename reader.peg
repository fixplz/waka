{
  function atom(bind,expr,op){
    if(op){
      var _tmp = {};
      _tmp[op=='?'?'opt':op=='+'?'many1':'many'] = expr;
    }
    else {var _tmp = expr}
    if(bind)_tmp.bind=bind;
    return _tmp
  }
}


start =
  sp
  init:embed?
  rules:rule+
  { rules }

rule =
  name:name
  eq
  def:expr
  semi
  {{
    name: name,
    def: def,
  }}

expr =
  left:exprFormat
  tail:(
    slash 
    e:expr {e}
    )*
  {
    tail.length > 0 ?
      { alt: [left].concat(tail) }
    : left
  }

exprFormat =
  body:exprSeq? f:format?
  {
    f == null ? body
    : f.val ? { format: { val: f.val, of: body }}
    : { format: { obj: f.obj, of: body }}
  }

format = 
  '{' sp
  (
    obj:(
      n:name
      col
      v:js_expr
      comma?
      {{name:n, val:v}}
      )+
    '}' sp
  / val:( n:js_expr sp '}' sp {n})
    )
  {
    val != null ? { val: val }
    : obj != null ? { obj: obj }
    : null
  }

js_expr = [[^},]+]

exprSeq =
  seq:exprAtom+
  {
    seq.length==1 ?
      seq[0]
    : {seq: seq}
  }

exprAtom =
  bind:(b:name col {b})?
  expr:(
    ref / str / range / expr_parens
  )
  op:('?'/'*'/'+')? sp
  {
    atom(bind,expr,op)
  }

expr_parens = '(' sp e:expr ')' sp {e}

ref = n:name {{ref:n}}

str =
  ['] x:[(\\.|[^'])*] ['] sp {{ str: x }}
/ ["] x:[(\\.|[^"])*] ["] sp {{ str: x }}

range =
  '[' sp
  not:'\^'? sp
  r:(
    from:rangechar '-' to:rangechar sp
    {{ from: from, to: to }}
  / chars:(x:rangecharsingle+ sp {x.join('')})+
    {{ oneof: chars.join('') }}
  )*
  ']' sp
  {{ range: r, not: not == '^' }}

rangechar = [[^\[\] ]]
rangecharsingle = [[^\[\]\\ ]] / '\\' [.]


embed = '{' x:js '}' sp { x }
js = [[^{}]*] ( '{' js '}' [[^{}]*] )*

word = [[a-zA-Z_][a-zA-Z0-9_]*]
sp = ([[ \r\n]+] / '//' [[^\n]*\n])*

name = n:word sp {n}

slash = '/' sp
eq = '=' sp
col = ':' sp
comma = ',' sp
semi = ';' sp
