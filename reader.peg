{
  function atom(bind,expr,op){
    if(op){
      var _tmp = {};
      _tmp[op=='?'?'opt':op=='+'?'many1':'many'] = expr;
    }
    else {var _tmp = expr}
    if(bind)_tmp.bind=bind;
    return _tmp
  }
}


start =
  sp
  init:embed?
  rules:rule+

rule =
  name:name
  eq
  def:expr
  {{
    name: name,
    def: def,
  }}

expr =
  left:exprFormat
  tail:(
    slash 
    e:expr {e}
    )*
  {
    tail.length > 0 ?
      { alt: [left].concat(tail) }
    : left
  }

exprFormat =
  body:exprSeq
  '{' sp
  ( val:name sp '}' sp 
  / ns:(n:name sp col v:js_expr ','? sp)+ )
  {
    val != null ? { format: { val: val, of: body } }
    : ns != null ? { format: { obj: ns, of: body } }
    : body
  }

js_expr = [[^},]+]

exprSeq =
  seq:exprAtom+
  {
    seq.length==1 ?
      seq[0]
    : {seq: seq}
  }

exprAtom =
  not_rule
  bind:(b:name col {b})?
  expr:(ref/str/re / expr_parens) sp
  op:('?'/'*'/'+')? sp
  {
    atom(bind,expr,op)
  }

expr_parens = '(' sp e:expr ')' sp {e}

ref = n:name {{ref:n}}

str =
  ['] x:[(\\.|[^'])*] ['] {{ str: x }}
/ ["] x:[(\\.|[^"])*] ["] {{ str: x }}


embed = '{' x:js '}' sp { x }
js = [[^{}]*] ( '{' js '}' [[^{}]*] )*

not_rule = !(name [ *=])

name = [[a-zA-Z_][a-zA-Z0-9_]*]
sp = ([[ \r\n]+] / '//' [[^\n]*\n])*

slash = '/' _
eq = '=' _
col = ':' _
